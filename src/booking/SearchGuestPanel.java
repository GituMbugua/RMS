/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package booking;

import static booking.Guest.currentGuest;
import static booking.GuestDetailsForm.guestRegistered;
import static booking.ReservationForm.guestDetailsAction;
import static booking.ReservationForm.nrPanel;
import static booking.ReservationForm.sgPanel;
import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gitu
 */
public class SearchGuestPanel extends javax.swing.JPanel {

    private Connection con = MySqlConnection.myConnection();
    private ResultSet rs;
    static int guestConfirmValue = 1;
    static Guest selectedGuest = new Guest();
    
    /**
     * Creates new form SearchGuestPanel
     */
    public SearchGuestPanel() {
        initComponents();
        customInit();
    }

    private void customInit() {
        btnSearch.setEnabled(false);
        tblResults.getTableHeader().setFont(new Font("Corbel", Font.PLAIN, 16));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchFirstName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        searchSurname = new javax.swing.JTextField();
        btnViewAll = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnAddNew = new javax.swing.JButton();
        rightPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblResults = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1200, 655));

        leftPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Corbel", 0, 18)); // NOI18N
        jLabel1.setText("First Name");

        searchFirstName.setFont(new java.awt.Font("Corbel", 0, 16)); // NOI18N
        searchFirstName.setToolTipText("Search Guest...");
        searchFirstName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchFirstNameKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Corbel", 0, 18)); // NOI18N
        jLabel2.setText("Surname");

        searchSurname.setFont(new java.awt.Font("Corbel", 0, 16)); // NOI18N

        btnViewAll.setBackground(new java.awt.Color(80, 170, 195));
        btnViewAll.setFont(new java.awt.Font("Corbel", 0, 20)); // NOI18N
        btnViewAll.setForeground(new java.awt.Color(255, 255, 255));
        btnViewAll.setText("View All");
        btnViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(250, 250, 250));
        btnSearch.setFont(new java.awt.Font("Corbel", 0, 20)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnClose.setBackground(new java.awt.Color(245, 108, 108));
        btnClose.setFont(new java.awt.Font("Corbel", 0, 20)); // NOI18N
        btnClose.setForeground(new java.awt.Color(255, 255, 255));
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnAddNew.setBackground(new java.awt.Color(80, 170, 195));
        btnAddNew.setFont(new java.awt.Font("Corbel", 0, 20)); // NOI18N
        btnAddNew.setForeground(new java.awt.Color(255, 255, 255));
        btnAddNew.setText("Add New");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(searchFirstName)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(searchSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addComponent(btnViewAll, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddNew, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 136, Short.MAX_VALUE))
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGap(189, 189, 189)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNew, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnViewAll, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58))
        );

        rightPanel.setBackground(new java.awt.Color(35, 67, 67));

        tblResults.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tblResults.setFont(new java.awt.Font("Corbel", 0, 16)); // NOI18N
        tblResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Middle Name", "Surname", "National ID Number", "Passport Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblResults.setRowHeight(25);
        tblResults.setSelectionBackground(new java.awt.Color(105, 205, 130));
        tblResults.setShowVerticalLines(false);
        tblResults.getTableHeader().setReorderingAllowed(false);
        tblResults.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblResultsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblResults);
        if (tblResults.getColumnModel().getColumnCount() > 0) {
            tblResults.getColumnModel().getColumn(0).setResizable(false);
            tblResults.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jLabel3.setFont(new java.awt.Font("Corbel", 1, 30)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Guest List");

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightPanelLayout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34))
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightPanelLayout.createSequentialGroup()
                .addContainerGap(89, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(rightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(rightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            PreparedStatement p = null;
            String query = "";
            ArrayList<Guest> guestList = new ArrayList();
            DefaultTableModel model = (DefaultTableModel)tblResults.getModel();
        
            model.setRowCount(0);
            Object[] col = new Object[7];

            String firstName, surname;
            firstName = searchFirstName.getText();
            surname = searchSurname.getText();
            
            if (!firstName.isEmpty() && !surname.isEmpty()) {
                query = "SELECT * FROM `guest` WHERE `first_name` = ? AND `surname` = ?";
                p = con.prepareStatement(query);
                p.setString(1, firstName);
                p.setString(2, surname);
            }
            else if (firstName.isEmpty() && !surname.isEmpty()) {
                query = "SELECT * FROM `guest` WHERE `surname` = ?";
                p = con.prepareStatement(query);
                p.setString(1, surname);
            }
            else if (!firstName.isEmpty() && surname.isEmpty()) {
                query = "SELECT * FROM `guest` WHERE `first_name` = ?";
                p = con.prepareStatement(query);
                p.setString(1, firstName);
            }
            else
                JOptionPane.showMessageDialog(null, "No input detected!");
            
            rs = p.executeQuery();
            
            Guest guest;
            while (rs.next()) {
                guest = new Guest(rs.getString("first_name"), rs.getString("middle_name"), rs.getString("surname"), rs.getString("date_of_birth"), rs.getString("phone_number"), rs.getString("address"), rs.getString("email"), rs.getString("national_id_num"), rs.getString("passport_num"), rs.getString("nationality"), rs.getString("country_of_residence"), rs.getString("occupation"), rs.getString("health_considerations"), rs.getString("preferred_room"));
                guest.setId(rs.getInt("guest_id"));
                guestList.add(guest);
            }
            
            for (int i=0; i<guestList.size(); i++) {
                col[0] = guestList.get(i).getId();
                col[1] = guestList.get(i).getFirstName();
                col[2] = guestList.get(i).getMiddleName();
                col[3] = guestList.get(i).getSurname();
                col[4] = guestList.get(i).getIdNum();
                col[5] = guestList.get(i).getPassportNum();
                model.addRow(col);
            }            
        }
        catch (Exception ex) {
            System.out.println("Error! " + ex);
            JOptionPane.showMessageDialog(null, "Error!");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void tblResultsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblResultsMouseClicked
        DefaultTableModel model = (DefaultTableModel)tblResults.getModel();
        int selectedRowIndex = tblResults.getSelectedRow();
        int column = 0;
        String value = model.getValueAt(selectedRowIndex, column).toString();
        String tmpGuestFname = model.getValueAt(selectedRowIndex, column+1).toString();
        String tmpGuestMname = model.getValueAt(selectedRowIndex, column+2).toString();
        String tmpGuestSname = model.getValueAt(selectedRowIndex, column+3).toString(); 
        String tmpGuestIdNum = model.getValueAt(selectedRowIndex, column+4).toString(); 
        String tmpGuestPassportNum = model.getValueAt(selectedRowIndex, column+5).toString(); 
        
        if (!guestDetailsAction.equals(null)) {
            switch (guestDetailsAction) {
                case "newRes":
                    guestConfirmValue = JOptionPane.showConfirmDialog(null, "Make new reservation for " + tmpGuestFname +" "+ tmpGuestSname + "?", "Confirm Selection", JOptionPane.YES_NO_OPTION);
                    if (guestConfirmValue == 0) {
                        currentGuest.setId(Integer.parseInt(value));
                        currentGuest.setFirstName(tmpGuestFname);
                        currentGuest.setMiddleName(tmpGuestMname);
                        currentGuest.setSurname(tmpGuestSname);
                        currentGuest.setIdNum(tmpGuestIdNum);
                        currentGuest.setPassportNum(tmpGuestPassportNum);

                        sgPanel.setVisible(false);
                        nrPanel.currentGuestDetails();
                        nrPanel.setVisible(true);
                    }
                    break;
                case "party":
                    guestConfirmValue = JOptionPane.showConfirmDialog(null, "Add " + tmpGuestFname +" "+ tmpGuestSname + " to this party?", "Confirm Selection", JOptionPane.YES_NO_OPTION);
                    if (guestConfirmValue == 0) {
                        //selectedGuest = new Guest();
                        selectedGuest.setId(Integer.parseInt(value));
                        selectedGuest.setFirstName(tmpGuestFname);
                        selectedGuest.setMiddleName(tmpGuestMname);
                        selectedGuest.setSurname(tmpGuestSname);
                        selectedGuest.setIdNum(tmpGuestIdNum);
                        selectedGuest.setPassportNum(tmpGuestPassportNum);
                        ((JDialog)SearchGuestPanel.this.getTopLevelAncestor()).dispose();
                        
                    }
                    break;
            }
        } else {
            System.out.println("Action is null.");
        }
    }//GEN-LAST:event_tblResultsMouseClicked

    private void btnViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllActionPerformed
        try {
            Statement st;
            ArrayList<Guest> guestList = new ArrayList();
            DefaultTableModel model = (DefaultTableModel)tblResults.getModel();
        
            
            String query = "SELECT * FROM `guest`";
            st = con.createStatement();
            rs = st.executeQuery(query);
            
            Guest guest;
            while (rs.next()) {
                guest = new Guest(rs.getString("first_name"), rs.getString("middle_name"), rs.getString("surname"), rs.getString("date_of_birth"), rs.getString("phone_number"), rs.getString("address"), rs.getString("email"), rs.getString("national_id_num"), rs.getString("passport_num"), rs.getString("nationality"), rs.getString("country_of_residence"), rs.getString("occupation"), rs.getString("health_considerations"), rs.getString("preferred_room"));
                guest.setId(rs.getInt("guest_id"));
                guestList.add(guest);
            }
            
            if (!guestList.isEmpty()) {
                model.setRowCount(0);
                Object[] col = new Object[7];
                for (int i=0; i<guestList.size(); i++) {
                    col[0] = guestList.get(i).getId();
                    col[1] = guestList.get(i).getFirstName();
                    col[2] = guestList.get(i).getMiddleName();
                    col[3] = guestList.get(i).getSurname();
                    col[4] = guestList.get(i).getIdNum();
                    col[5] = guestList.get(i).getPassportNum();
                    model.addRow(col);
                }            
            } else {
                String noRecords = "No Records.";
                model.setRowCount(0);
                Object[] col = new Object[1];
                col[0] = noRecords;

                model.addRow(col);
            }
        }
        catch (Exception ex) {
            System.out.println("Error! " + ex);
            JOptionPane.showMessageDialog(null, "Error!");
        }
    }//GEN-LAST:event_btnViewAllActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        guestConfirmValue = 1;
        ((JDialog)SearchGuestPanel.this.getTopLevelAncestor()).dispose();
        
    }//GEN-LAST:event_btnCloseActionPerformed

    private void searchFirstNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFirstNameKeyTyped
        btnSearch.setEnabled(true);
        btnSearch.setBackground(new Color(105, 205, 130));
    }//GEN-LAST:event_searchFirstNameKeyTyped

    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        GuestDetailsForm registerGuest = new GuestDetailsForm((JDialog) this.getRootPane().getParent(), true);
        registerGuest.setTitle("Register Guest Form");
        registerGuest.setLocationRelativeTo(null);
        registerGuest.setVisible(true);
        registerGuest.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        registerGuest.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                if (guestRegistered == 1) {
                    if (!guestDetailsAction.equals(null)) {
                        switch (guestDetailsAction) {
                            case "newRes":
                                sgPanel.setVisible(false);
                                nrPanel.currentGuestDetails();
                                nrPanel.setVisible(true);
                                break;
                            case "party":
                                ((JDialog)SearchGuestPanel.this.getTopLevelAncestor()).dispose();
                                break;
                        }
                    } else {
                        System.out.println("Action is null.");
                    }
                }
            }
        });
    }//GEN-LAST:event_btnAddNewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnViewAll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JTextField searchFirstName;
    private javax.swing.JTextField searchSurname;
    private javax.swing.JTable tblResults;
    // End of variables declaration//GEN-END:variables
}
